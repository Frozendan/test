{"version":3,"sources":["components/counter.tsx","pages/counter-page.tsx","components/table.tsx","pages/table-page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","useState","counter","setCounter","className","id","onClick","CounterPage","url","Table","employees","setEmployees","inAddingMode","setInAddingMode","name","email","position","initEmployee","setInitEmployee","currentPage","pageSize","pagination","setPagination","pageCount","setPageCount","setError","useEffect","getData","a","axios","get","response","Math","ceil","data","length","handleInputChange","event","target","value","onSave","re","test","post","map","key","index","toUpperCase","upperLimit","renderData","slice","renderBody","Fragment","type","onChange","colSpan","controls","i","activeClassName","push","createPagination","TablePage","App","exact","to","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a6d1227.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Counter = () => {\r\n  \r\n    const [counter, setCounter] = useState(0)\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                <h1 className='text-center' id='title'>Counter</h1>\r\n                <div>\r\n                    <p className='counter-label'>\r\n                        {counter}\r\n                    </p>\r\n                    <div className='counter-control'>\r\n                        <button onClick={() => setCounter(counter + 1)}>Increase</button>\r\n                        <button onClick={() => setCounter(0)}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Counter;\r\n","import React from 'react';\r\nimport Counter from '../components/counter'\r\n\r\n\r\nfunction CounterPage() {\r\n    return (\r\n        <>\r\n            <Counter />\r\n        </>\r\n    )\r\n}\r\nexport default CounterPage;\r\n","import React, { useMemo, useState, useCallback, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://60a5e4e5c0c1fd00175f49c4.mockapi.io/employees';\r\ninterface Employee {\r\n    id?: number,\r\n    name: string, \r\n    email: string,\r\n    position: string\r\n}\r\nconst Table = () => {\r\n    //Define States\r\n    //NOTE: The data parameters should be pass through props for better reuseable in real project\r\n    const initEmployeeState = {\r\n        name: \"\",\r\n        email: \"\",\r\n        position: \"\"\r\n    };\r\n    const initPagination = {\r\n        currentPage: 1,\r\n        pageSize: 5,\r\n    };\r\n    const [employees, setEmployees] = useState<Employee[]>([])\r\n    const [inAddingMode, setInAddingMode] = useState(false);\r\n    const [initEmployee, setInitEmployee] = useState(initEmployeeState)\r\n    const [isValid, setIsValid] = useState(false)\r\n    const [pagination, setPagination] = useState(initPagination)\r\n    const [pageCount, setPageCount] = useState(1)\r\n    const [error, setError] = useState(false)\r\n\r\n    //Get Data\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    const getData = async () => {\r\n        const response = await axios.get(url);\r\n        const pageCount = Math.ceil(response.data.length / pagination.pageSize);\r\n        setEmployees(response.data)\r\n        setPageCount(pageCount)\r\n    }\r\n\r\n    //Logic code \r\n    const renderHeader = () => {\r\n        let headerElement = ['name', 'email', 'position']\r\n\r\n        return headerElement.map((key, index) => {\r\n            return <th key={index}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n\r\n    const renderBody = () => {\r\n        if (employees) {\r\n            const upperLimit = pagination.currentPage * pagination.pageSize;\r\n            const renderData = employees.slice((upperLimit - pagination.pageSize), upperLimit);\r\n            return renderData && renderData.map(({ id, name, email, position }) => {\r\n                return (\r\n                    <tr key={id}>\r\n                        <td>{name}</td>\r\n                        <td>{email}</td>\r\n                        <td>{position}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (event:any) => {\r\n        const { name, value } = event.target;\r\n        setInitEmployee({ ...initEmployee, [name]: value });\r\n    };\r\n\r\n    const onAdd = () => {\r\n            setInAddingMode(true);\r\n    }\r\n\r\n    const onSave = async () => {\r\n        //For demo, I just make a simple validation, that prevent all fields are empty and wrong email format\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        const {name, email, position} = initEmployee;\r\n        if ((name && email && position) && re.test(email)){\r\n            await axios.post(url, initEmployee);\r\n            getData();\r\n            setInAddingMode(false);\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //PAGINATION\r\n    //For better customization, we can separate pagination to another component and allow customize through props of table,\r\n    //but in demo project I let it stay within table component\r\n\r\n    const createPagination = () => {\r\n        let controls = [];\r\n        for (let i = 1; i <= pageCount; i++) {\r\n            const activeClassName = i === pagination.currentPage ? 'selected' : '';\r\n            controls.push(\r\n                <button\r\n                key={i}\r\n                className={`control ${activeClassName}`}\r\n                onClick={() => setPagination({ ...pagination, currentPage: i })}\r\n                >\r\n                {i}\r\n                </button>\r\n            );\r\n        }\r\n        return controls;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                <h1 id='title'>Hello Health Table</h1>\r\n                <div>\r\n                    <table className='table' id='employee'>\r\n                        <thead>\r\n                            <tr>{renderHeader()}</tr>\r\n                        </thead>\r\n                        <tbody >\r\n                            {renderBody()}\r\n                            <tr>\r\n                                {  \r\n                                    inAddingMode && \r\n                                        <React.Fragment>\r\n                                        <td><input className='form-control' type='text' name='name' onChange={handleInputChange}/></td>\r\n                                        <td><input className='form-control' type='email' name='email' onChange={handleInputChange}/></td>\r\n                                        <td><input className='form-control' type='text' name='position' onChange={handleInputChange}/></td>\r\n                                       \r\n                                        </React.Fragment>\r\n                                }\r\n                            </tr>\r\n                            <tr>\r\n                                {\r\n                                    !inAddingMode && \r\n                                    <React.Fragment>\r\n                                        <td colSpan={4}>\r\n                                            <button onClick={() => onAdd()}>+ New</button>\r\n                                        </td>\r\n                                    </React.Fragment>\r\n                                }\r\n                                {\r\n                                    inAddingMode && \r\n                                    <React.Fragment>\r\n                                        <td colSpan={4}>\r\n                                            <button onClick={() => onSave()}>Save/Close</button>\r\n                                        </td>\r\n                                    </React.Fragment>\r\n                                }\r\n                            </tr>\r\n                          \r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div className='pagination'>\r\n                        {createPagination()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Table;\r\n","import React from 'react';\r\nimport Table from '../components/table'\r\n\r\n\r\nfunction TablePage() {\r\n    return (\r\n        <>\r\n            <Table />\r\n        </>\r\n    )\r\n}\r\nexport default TablePage;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from 'react-router-dom';\nimport './App.scss';\n\nimport CounterPage from './pages/counter-page'\nimport TablePage from './pages/table-page'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Router>\n        \n        <nav>\n          <div className='container'>\n              <ul className='nav-links'>\n                <li>\n                  <NavLink exact  activeClassName='is-active' to=\"/\">Table</NavLink>\n                </li>\n                <li>\n                  <NavLink exact  activeClassName='is-active' to=\"/counter\">Counter</NavLink>\n                </li>\n              </ul>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route exact path=\"/\" component={TablePage} />\n          <Route exact path=\"/counter\" component={CounterPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}